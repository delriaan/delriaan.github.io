[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring the MDRP Database",
    "section": "",
    "text": "This project explores the Medicaid Drug Rebate Program (MDRP) database. Data is retrieved via the MDRP API (description here) as well as general URL file retrieval routines:\n\n\n\n\nData Dictionary\n (Medicaid.gov)\n\n\nMDRP Data\n\n\n\nopenFDA Drug Data\n (used to augment MDRP data)\n\n\nRoute of Administration\nFDA.gov\n\n\n\n\nAll files for this project are hosted on GitHub\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCRAN\nGitHub\n\n\n purrr\n  jsonlite\n  httr\n  summarytools\n  munsell\n  cachem\n\n SmartEDA\n  htmltools\n  slider\n  stringi\n  magrittr\n  plotly\n\n DT\n  data.table\n  pdftools\n  lubridate\n  future\n  furrr\n\n book.of.utilities\n  book.of.features\n  book.of.workflow\n  architect\n  smart.data\n  event.vectors"
  },
  {
    "objectID": "index.html#required-libraries",
    "href": "index.html#required-libraries",
    "title": "Exploring the MDRP Database",
    "section": "",
    "text": "CRAN\nGitHub\n\n\n purrr\n  jsonlite\n  httr\n  summarytools\n  munsell\n  cachem\n\n SmartEDA\n  htmltools\n  slider\n  stringi\n  magrittr\n  plotly\n\n DT\n  data.table\n  pdftools\n  lubridate\n  future\n  furrr\n\n book.of.utilities\n  book.of.features\n  book.of.workflow\n  architect\n  smart.data\n  event.vectors"
  },
  {
    "objectID": "question2.html",
    "href": "question2.html",
    "title": "Question II: Event Network",
    "section": "",
    "text": "PreparationSidebarExecution and Wrap Up\n\n\nTo prepare the input data, decisions about how to split the drug observation data into subgroups across which a common “join-key” is projected is required.\n\nThe use case for event.vectors is when you have more “join-key” values (\\(V\\)) expressed in orders of magnitude fewer event sources (\\(U: ||U|| \\ll ||V||\\))\n\nBefore investigation, I used a subset of the data conditioned on non-NA values for field dea_schedule. As a decision aid, I leveraged the dfSummary() function from the summarytools package.\nAfter reviewing the summary, I chose dea_schedule as the join and as the splitting factor used the first letter of values in labeler_name grouped into alphabetical sets of three or two.\n\n# Split 'master_drug_data' and store in attached environment 'nb_env' (\"notebook environment\")\nnb_env %$% rm(list = ls(pattern = \"[A-Z]\"));\n\nletter_sets &lt;- { slider::slide(\n    LETTERS\n    , .after = 2L\n    , .step = 3\n    , .f = \\(x) sprintf(\"%s-%s\", x[1], ifelse(is.na(x[3]), x[2], x[3]))\n    ) |&gt; \n    purrr::compact() |&gt;\n    unlist()\n  }\n\ndefine(\n  get.smart(\"drugs\")$use(subset=!!.subset_expr) |&gt; unique()\n  , modify_at(.SD, c(\"market_date\", \"termination_date\"), \\(x) as.Date(x, origin = origin)) |&gt;\n    modify_at(\"dea_schedule\", \\(x){ modify_if(x, is.na, \\(i) \"C0\") })\n  , .SD[!duplicated(alt_ndc)] ~ drug_category + dea_schedule\n  , split_factor = pmap_chr({ \n        logic_map(\n          fvec = stri_sub(labeler_name, length=1)\n          , bvec = sprintf(\"[%s]\", !!letter_sets)\n          , regex = TRUE\n          ) |&gt; \n        as.data.table() %&gt;% \n        setnames(stri_replace_all_regex(names(.), \"\\\\[|(])\", \"\", vectorise_all = FALSE))\n      }, function(...) ...names()[c(...) == 1])\n  , rel_key = 1\n  , ~rel_key + split_factor + labeler_name + dea_schedule + drug_category + alt_ndc + fda_approval_date + market_date + termination_date + pharm_class + fda_product_name\n  ) |&gt; \n  unique() |&gt;\n  split(by = \"split_factor\") %T&gt;% \n  # split(by = \"dea_schedule\") %T&gt;% \n  (\\(x) cat(sprintf(\"Created %s objects\", length(x)), sep = \"\\n\"))() |&gt; \n  list2env(envir = nb_env)\n\nCreated 9 objects\n\n\n&lt;environment: 0x00000132fa9fbf00&gt;\nattr(,\"name\")\n[1] \"nb_env\"\n\n\n\n\n\nPart IPart II\n\n\nGiven event space \\(\\mathbb{E}\\) with \\(k\\) independent event groupings: \\[\n\\mathbb{E}:=\\hat{e}_1 + \\hat{e}_2+  \\hat{e}_3 + \\cdots + \\hat{e}_k\n\\] and corresponding heterogeneous data tables (\\(\\mathbb{D} :=D_1,D_2,D_3,\\cdots,D_k\\)) each having a “join-key” (\\(J\\), a column or column tuple shared across \\(\\mathbb{D}\\)), an event vector (\\(\\overrightarrow{V_q}\\)) is formed having values indicating the existence or absence of selection over \\(D_k\\) predicated on \\(q\\) unique values \\(\\forall J\\):\n\\[\n\\overrightarrow{V_q}:=\n\\exists \\sigma_{j_q \\in J}(D_k) \\Rightarrow\n\\begin{pmatrix}0\\\\1\\end{pmatrix}_{q}\\hat{e}_1 +\n\\begin{pmatrix}0\\\\1\\end{pmatrix}_{q}\\hat{e}_2 +\n\\begin{pmatrix}0\\\\1\\end{pmatrix}_{q}\\hat{e}_3 +\n\\cdots +\n\\begin{pmatrix}0\\\\1\\end{pmatrix}_{q}\\hat{e}_k \\\\\nq :=\\text{ the q}^{th}\\text{ distinct value in }J\\enspace \\forall \\mathbb{D} \\\\\n\\sigma_{j_q \\in J}(D_k) \\equiv \\dot{D_{qk}}:=\\text{ predicated selection operation in a relational algebra context}\n\\]\nFrom each \\(\\overrightarrow{V_q}\\), \\(q\\) subsets over \\(\\mathbb{D}\\) are derived as \\(\\Gamma_q:=D_{k_q}|\\overrightarrow{V_q}\\ne\\emptyset\\). The number of records (\\(n\\)) resulting from selection across the data sets can be represented as an array of row vectors:\n\\[\n\\Gamma_q\\longrightarrow \\text{Distinct row counts over}\\dot{D_{k_q}}\\Rightarrow\\begin{array}\n((n_{11}&n_{12}&n_{13}&\\cdots&n_{1k})\\\\\n(n_{21}&n_{22}&n_{23}&\\cdots&n_{2k})\\\\\n(n_{31}&n_{32}&n_{33}&\\cdots&n_{3k})\\\\\n\\vdots&\\vdots&\\vdots&\\vdots&\\vdots\\\\\n(n_{q1}&n_{q2}&n_{q3}&\\cdots&n_{qk})\n\\end{array}\n\\]\n\n\nNext, considering a fully-connected graph having \\(\\beta\\) nodes and number of edges given as follows: \\[\n\\begin{align}\nK\\rightarrow f(\\beta) := {\\beta\\choose2} \\equiv \\frac{\\beta(\\beta-1)}{2}\n\\end{align}\n\\] and taking into account that event.vectors creates separate graphs for each \\(q\\), the number of edges per fully-connected graph \\(G_q\\) is given as follows:\n\\[\n\\beta_q := \\sum_{i=1}^q\\Gamma_i \\Rightarrow (\\beta_1,\\beta_2,\\beta_3,\\cdots,\\beta_q)\\\\\nK_q \\rightarrow f(\\beta_q) := {\\beta_q\\choose2}\n\\] , which is also the number of comparisons to be carried out computationally.\n\\(K_q\\) can be reduced by projecting a set of logically-reduced predicates (as mentioned earlier) to interim results before creating each of the \\(q\\) graphs:\n\\[\nP_m:m\\text{ predicates}\\Rightarrow\n\\begin{pmatrix}0\\\\1\\end{pmatrix}_m\\\\\n\\dot\\beta_q:=\\forall i \\in q\\rightarrow\\Gamma_i*\\Pi (P_m|\\dot D_{k_i})\\\\ 0 \\le \\dot\\beta_q\\le\\beta_q\n\\] This can quickly result in not only edge reduction but graph elimination for each \\(q\\) (\\(\\Gamma_q\\) can easily become sparse). Trial and error may needed to fine-tune how graphs are generated as well as improve execution performance which is why the graph.control argument is provided for event.vectors::make.evs_universe() to allow for operating on graphs after the fact.\n\n\n\n\n\nThe following parameters were used to generate event graphs:\n\nmGap &gt;= -60\nmGap &lt;= 90\ntime.control = list(0, 181)\nunit = \"days\"\n\nand packages future and furrr were invoked to enable parallelism (externally and internally, respectively).\n\nload_unloaded(event.vectors, furrr, tictoc, igraph);\n\nmdrp_events &lt;- event.vectors$new();\n\n[2023-11-22 20:29:00.664873] Initializing the event vector class\n\nmdrp_events$configure(\n  src.defs = sprintf(\"nb_env[[\\\"%s\\\"]]\", ls(\"nb_env\", pattern = \"[A-Z]\")) |&gt; rlang::parse_exprs()\n  , contexts = ls(\"nb_env\", pattern = \"[A-Z]\")\n  , map.fields = {\n      replicate(\n        n = ls(\"nb_env\", pattern = \"[A-Z]\") |&gt; uniqueN()\n        , expr = { c(\"dea_schedule\", \"market_date\", \"termination_date\")}\n        , simplify = FALSE\n        )\n      }\n  , chatty = !TRUE\n  );\n\nWarning: Assigning non-quosure objects to quosure lists is deprecated as of rlang 0.3.0.\nPlease coerce to a bare list beforehand with `as.list()`\nThis warning is displayed once every 8 hours.\n\n\nValidating source `nb_env[[\"V1\"]]`\n\n\nValidating source `nb_env[[\"V2\"]]`\n\n\nValidating source `nb_env[[\"V3\"]]`\n\n\nValidating source `nb_env[[\"V4\"]]`\n\n\nValidating source `nb_env[[\"V5\"]]`\n\n\nValidating source `nb_env[[\"V6\"]]`\n\n\nValidating source `nb_env[[\"V7\"]]`\n\n\nValidating source `nb_env[[\"V8\"]]`\n\n\nValidating source `nb_env[[\"V9\"]]`\n\nfuture_cluster &lt;- makeClusterPSOCK(5);\nplan(tweak(cluster, workers = future_cluster));\n\ntic(glue::glue(\"{Sys.time()} Creating the Event Vectors\"));\nmdrp_events$\n  make.evs_universe(\n    mGap &gt;= -60\n    , mGap &lt;= 90\n    , time.control = list(0, 181)\n    , unit = \"days\"\n    , furrr_opts = furrr::furrr_options(scheduling = Inf, seed = TRUE)\n    , graph.only = FALSE\n    , chatty = FALSE\n    );\n\n[2023-11-22 20:29:02.362345] ... creating event graphs\n\n\n[2023-11-22 20:29:02.862909] The event vectors are ready for analysis\n\ntoc(log = TRUE);\n\n2023-11-22 20:29:01.987831 Creating the Event Vectors: 0.88 sec elapsed\n\nsuppressMessages({\n  plan(sequential)\n  if (\"future_cluster\" %in% ls()){ \n    parallel::stopCluster(future_cluster)\n    rm(future_cluster)\n  }\n  invisible(gc())\n});\n\nAfter generating the universe of events I explored the graphs using visNetwork. Only one graph was interesting enough to retain which can be viewed here.\n\nf2ab &lt;- list(\n  theta = 0.1\n  , gravitationalConstant = -500\n  , centralGravity = 0.0\n  ,  avoidOverlap = 1\n  , damping = 0.7\n  );\n\nviz_file &lt;- \"viznetwork_%s.html\";\n\n#\nev_plot &lt;- \\(g){\n  .css &lt;- \"background-color:#444444; color:#DDDDDD; border-radius:10; font-weight:bold; \"\n  \n  # Vertices (https://rdrr.io/cran/visNetwork/man/visNodes.html)\n  V(g)$trace &lt;- retrace.evs(event_graph = g, evs = mdrp_events);\n  \n  g0 &lt;- V(g)$name |&gt; map(\\(x){ \n      stri_replace_first_regex(x, pattern = \"[:][0-9]+\", replacement = \"\") |&gt; \n        # stri_split_fixed(\" | \", simplify = TRUE) |&gt; \n        unlist()\n        paste(collapse = \",\")\n    })\n  \n  g1 &lt;- V(g)$trace |&gt; map(\\(x) x$labeler_name |&gt; unique() |&gt; paste(collapse = \",\"))\n  \n  g2 &lt;- sprintf(\"In-Degree Quantile Band: %s\", degree(graph = g, mode = \"in\", loops = FALSE) |&gt; make.quantiles(as.factor = TRUE, 0:10/10) |&gt; as.character())\n  \n  V(g)$group &lt;- paste(g0, g1, g2, sep=\",\")\n  \n  V(g)$title &lt;- map(V(g)$trace, \\(x){\n    sprintf(\n      fmt = \"&lt;b&gt;%s&lt;/b&gt;&lt;br&gt;&lt;ul&gt;%s&lt;/ul&gt;\"\n      , x$labeler_name\n      , sprintf(\n          \"&lt;li&gt;%s&lt;/li&gt;\"\n          , x[, sprintf(\n                  \"%s days on market (%s)\"\n                  , x$on_market_age\n                  , stri_extract_first_regex(x$on_market_age |&gt; as.numeric(unit = \"days\") |&gt; ddays(), \"[~].+s\")\n                  ) |&gt; \n                c(alt_ndc, fda_product_name)\n              ]\n          ) |&gt; paste(collapse = \"\")\n      )\n    });\n    \n  \n    V(g)$color &lt;- degree(graph = g, mode = \"total\", loops = FALSE) |&gt;\n                  ratio(type = \"of.max\", decimals = 6) |&gt; \n                  rgb(red = 0.500000, blue = 0.500000);\n  \n  # Edges (https://rdrr.io/cran/visNetwork/man/visEdges.html)\n  E(g)$title &lt;- edge.attributes(g) %$% {\n    src.pair |&gt; \n      stri_split_fixed(\" -&gt; \", simplify = TRUE) |&gt; \n      (\\(x) list(src_from = x[, 1], src_to = x[, 2]))() |&gt; \n      list2env(envir = environment());\n    \n    .css &lt;- \"background-color:#DDDDDDEE; border:solid 1px #CCCCCCEE; border-radius:10; font-weight:bold; width:120%; padding-top:10px; padding-bottom:10px; \"\n    sprintf(\n      paste0(\n        \"&lt;p style=\\\"%s\\\"&gt;&lt;b style=\\\"font-size:larger; \\\"&gt;&nbsp;&nbsp;%s &lt;span style=\\\"font-family:Georgia\\\"&gt;(&epsilon; = %s)&lt;/span&gt;&lt;/b&gt;\"\n        , \"&lt;br&gt;&lt;br&gt;&nbsp;&lt;u&gt;From&lt;/u&gt; {%s} &lt;sup&gt;&lt;%s&gt;&lt;/sup&gt;\"\n        , \"&lt;br&gt;&lt;br&gt;&nbsp;&lt;u&gt;To&lt;/u&gt; {%s} &lt;sup&gt;&lt;%s&gt;&lt;/sup&gt;&lt;/p&gt;\"\n        , \"&lt;/p&gt;\"\n        )\n      , .css, epsilon.desc, round(epsilon, 4) |&gt; as.character()\n      , src_from, from.coord\n      , src_to, to.coord\n      )\n  }\n    \n    E(g)$smooth &lt;- TRUE;\n    \n    E(g)$length &lt;- map(E(g)$mGap, \\(x) 50 * ratio((x - abs(min(x))), type = \"of.max\", decimals = 4));\n    \n    E(g)$dashes &lt;- E(g)$mGap |&gt; unlist() &gt; 0;\n    \n    E(g)$color &lt;- map(E(g), \\(x){ \n        v_ends.color &lt;- ends(graph = g, es = x) |&gt; map(\\(i) V(g)[[i]]$color |&gt; colorspace::hex2RGB()) \n        list(color = colorspace::mixcolor(\n                  alpha = 0.5\n                  , color1 = v_ends.color[[1]]\n                  , color2 = v_ends.color[[2]]\n                  ) |&gt; colorspace::hex()\n             , opacity = ifelse(x$mGap &lt;= 0, 1, 0.5)\n             )\n      });\n    \n    # Update & Output ----\n    .vizWidth = 1400\n    gph &lt;&lt;- g\n    visIgraph(igraph = g, physics = TRUE, type = \"full\") |&gt;\n    visPhysics(solver = \"forceAtlas2Based\", timestep = 0.05) |&gt;\n    visOptions(width = .vizWidth, height = (12/16) * .vizWidth, selectedBy = list(variable = \"group\", multiple = TRUE)) |&gt; \n      visEdges(smooth = FALSE) |&gt;\n      visNodes(font = list(face = \"Georgia\", size=\"40\", color = \"black\", background = \"#DEE\", bold=TRUE))\n}\n\n#\nmdrp_events$evt_graphs |&gt; \n  iwalk(\\(x, y){\n    ev_plot(x) |&gt; \n      htmlwidgets::prependContent(\n        tags$table(\n          tags$tr(\n              tags$td(style='font-weight:bold; align:right; padding-right:10px', \"Edges:\")\n              , tags$td(\"Dashes indicate non-overlapping event durations\")\n              )\n          , tags$tr(\n              tags$td(style='font-weight:bold; align:right; padding-right:10px', \"Colors: \")\n              , tags$td(HTML(\"Based on relative proportionality of &lt;code&gt;degree&lt;/code&gt; vertex metrics in the graph\"))\n              )\n          , tags$tr(\n              tags$td(style='font-weight:bold; align:right; padding-right:10px', \"Drop-down menu:\")\n              , tags$td(\"Use to select predefined vertex groups\")\n              )\n          )\n        ) |&gt;\n      saveWidget(file = sprintf(viz_file, y))\n})\n\nFrom here, one could conduct some graph analysis or graph-based predictive modeling, but for now, I will close this exploratory exercise. I hope you have found something interesting about the methods employed, packages used, and results. If you would like to follow up with me, I can be reached via LinkedIn.\n— Thank you!"
  },
  {
    "objectID": "etl.html",
    "href": "etl.html",
    "title": "Data Retrieval",
    "section": "",
    "text": "Retrieve and Prepare Data\n\n\nThe data were retrieved via R package httr with some initial conversion to data.table objects. Core objects were cached to disk (cachem) for easy retrieval after the initial pull.\n\n\n\n\nMDRP Data\nif (!\"global_api_data\" %in% .cache$keys()){ \n  download_temp &lt;- tempfile()\n  \n  as.character(urls$data) |&gt; \n    stri_extract_all_regex(\"http.+csv\", simplify = TRUE) |&gt; \n    as.vector() |&gt;\n    download.file(destfile = download_temp) \n    \n  api_data &lt;- read.csv(download_temp) |&gt; \n    as.data.table(na.rm = FALSE) %&gt;%\n    modify_at(ls(., pattern = \"(NDC|Code)$\"), as.character) %&gt;%\n    modify_at(ls(., pattern = \"Date\"), lubridate::mdy) %&gt;% \n    setnames(stri_replace_all_fixed(names(.), \".\", \" \"));\n  \n  cache_prep(api_data) |&gt; cache_save(.cache);\n}\n\nif (!\"api_data\" %in% ls()){ \n  cache_load(.cache, \"global_api_data\")\n}\n\n\nFormatting updates include the following:\n\nConvert field ‘NDC’ and fields ending in ‘Code’ to characters (numeral-encoded nominal values)\nConverting date fields to date format\nReplace ‘.’ in field names with ’ ’\n\n\nif (!\"global_api_dictionary\" %in% .cache$keys()){ \n  api_dictionary &lt;- invisible( \n    as.character(urls$data) |&gt; \n    stri_extract_all_regex(\"http.+pdf\", simplify = TRUE) |&gt; \n    as.vector() |&gt;\n    httr2::request() |&gt;\n    httr2::req_perform() |&gt;\n    httr2::resp_body_raw() |&gt; \n    pdf_text());\n  \n  .summary_labels &lt;- invisible({\n    .pattern &lt;- c(\"Pkg\"\n                  , \"Intro\"\n                  , \"COD Status\"\n                  , \"FDA Application Number\"\n                  , \"FDA Therapeutic Equivalence Code\"\n                  );\n    .replacement &lt;- c(\"Package\"\n                  , \"Intro.+Date\"\n                  , \"Covered Outpatient Drug [(]COD[)] Status\"\n                  , \"FDA Application Number/OTC Monograph Number\"\n                  , \"TEC\"\n                  );\n    \n    names(api_data) |&gt;\n      rlang::set_names() |&gt;\n      imap_chr(\\(x, y){\n        .out &lt;- api_dictionary |&gt; \n            stri_extract_all_regex(\n              sprintf(\n                fmt = \"(%s)[:]\\n.+\"\n                , stri_replace_all_fixed(str = x, pattern = .pattern , replacement = .replacement, vectorize_all = FALSE) \n                )\n            , simplify = TRUE\n            ) |&gt;\n            stats::na.omit() |&gt;\n            as.vector() |&gt; \n            paste(collapse = \"\\n\");\n        \n        if (rlang::is_empty(.out)){ \n          y \n        } else { \n          .out &lt;- paste(.out, collapse = \"\\n\")\n          ifelse(stringi::stri_length(.out) &gt; 50, paste0(stri_sub(.out, length = 50), \" ...\"), .out)\n        }\n      })\n  });\n  \n  iwalk(.summary_labels, \\(x, y){ \n    api_data &lt;&lt;- modify_at(api_data, y, \\(i){ attr(i, \"label\") &lt;- x; i }) \n  });\n  \n  cache_prep(api_data) |&gt; cache_save(.cache);\n  cache_prep(api_dictionary) |&gt; cache_save(.cache)\n} else {\n  cache_load(.cache, \"global_api_dictionary\");\n}\n\n\nif (!\"global_openfda_ndc\" %in% .cache$keys()){\n  json.file &lt;- paste0(params$data_dir, \"/drug-ndc-0001-of-0001.json\");\n  download.file &lt;- tempfile();\n  \n  if (!file.exists(json.file)){ \n    tags$p(sprintf(\"Retrieve data from '%s'\", urls$openFDA)) |&gt; print()\n    \n    GET(urls$data$children |&gt; stri_extract_first_regex(\"https.+json.zip\"),\n      write_disk(path = download.file, overwrite = TRUE));\n    \n    unzip(zipfile = download.file, exdir = \"data\")\n  }\n      \n  open_fda_ndc &lt;- { read_json(path = json.file) %$% {\n    map(results, as.data.table) |&gt; rbindlist(fill = TRUE) |&gt;  \n      setattr(\"metadata\", meta)}\n  }\n  \n  cache_prep(openFDA_ndc) |&gt; cache_save(.cache);\n}\n\nif (!\"openFDA_ndc\" %in% ls()){ \n  cache_load(.cache, \"global_openfda_ndc\");\n}\n\n\n\n\nNDC sequences come in a various formats, usually a 4-4-x, 5-4-x, or 5-3-x sequence (each integer indicating string length). Sometimes other formats arise, so normalizing all NDC sequences is a good idea, especially when there is a desire (or need) to join different data containing intersecting NDCs.\nThe following shows proportional representation of NDC formats in the OpenFDA and MDRP data, respectively:\n\n\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-f93efa741ce058efe66c\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-f93efa741ce058efe66c\"&gt;{\"x\":{\"visdat\":{\"7e5c45115cba\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c45115cba\",\"attrs\":{\"7e5c45115cba\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c45115cba.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-27db07c029936675573a\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-27db07c029936675573a\"&gt;{\"x\":{\"visdat\":{\"7e5c6bb0cac\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c6bb0cac\",\"attrs\":{\"7e5c6bb0cac\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c6bb0cac.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n\n\n$`OpenFDA: NDC Formats`\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-9b81bfdb2734b0e5116f\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-9b81bfdb2734b0e5116f\"&gt;{\"x\":{\"visdat\":{\"7e5c45115cba\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c45115cba\",\"attrs\":{\"7e5c45115cba\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c45115cba.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n\n$`MDRP: NDC Formats`\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-5bee64c03f00541d2bf4\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-5bee64c03f00541d2bf4\"&gt;{\"x\":{\"visdat\":{\"7e5c6bb0cac\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c6bb0cac\",\"attrs\":{\"7e5c6bb0cac\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c6bb0cac.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n\n\nThe MDRP has many more NDC sequences due to truncation of leading zeroes. Fortunately, an NDC sequence is a collection of code segments (present in the data) concatenated with a hyphen. Knowing this, A function (check_ndc_format() — see setup.R was created in order to derive conformed NDC segment sequences (using labeler and product codes) based on the OpenFDA sequences, allowing the MDRP and OpenFDA data to be joined later in the process."
  },
  {
    "objectID": "etl.html#data-wrangling",
    "href": "etl.html#data-wrangling",
    "title": "Data Retrieval",
    "section": "",
    "text": "Retrieve and Prepare Data\n\n\nThe data were retrieved via R package httr with some initial conversion to data.table objects. Core objects were cached to disk (cachem) for easy retrieval after the initial pull.\n\n\n\n\nMDRP Data\nif (!\"global_api_data\" %in% .cache$keys()){ \n  download_temp &lt;- tempfile()\n  \n  as.character(urls$data) |&gt; \n    stri_extract_all_regex(\"http.+csv\", simplify = TRUE) |&gt; \n    as.vector() |&gt;\n    download.file(destfile = download_temp) \n    \n  api_data &lt;- read.csv(download_temp) |&gt; \n    as.data.table(na.rm = FALSE) %&gt;%\n    modify_at(ls(., pattern = \"(NDC|Code)$\"), as.character) %&gt;%\n    modify_at(ls(., pattern = \"Date\"), lubridate::mdy) %&gt;% \n    setnames(stri_replace_all_fixed(names(.), \".\", \" \"));\n  \n  cache_prep(api_data) |&gt; cache_save(.cache);\n}\n\nif (!\"api_data\" %in% ls()){ \n  cache_load(.cache, \"global_api_data\")\n}\n\n\nFormatting updates include the following:\n\nConvert field ‘NDC’ and fields ending in ‘Code’ to characters (numeral-encoded nominal values)\nConverting date fields to date format\nReplace ‘.’ in field names with ’ ’\n\n\nif (!\"global_api_dictionary\" %in% .cache$keys()){ \n  api_dictionary &lt;- invisible( \n    as.character(urls$data) |&gt; \n    stri_extract_all_regex(\"http.+pdf\", simplify = TRUE) |&gt; \n    as.vector() |&gt;\n    httr2::request() |&gt;\n    httr2::req_perform() |&gt;\n    httr2::resp_body_raw() |&gt; \n    pdf_text());\n  \n  .summary_labels &lt;- invisible({\n    .pattern &lt;- c(\"Pkg\"\n                  , \"Intro\"\n                  , \"COD Status\"\n                  , \"FDA Application Number\"\n                  , \"FDA Therapeutic Equivalence Code\"\n                  );\n    .replacement &lt;- c(\"Package\"\n                  , \"Intro.+Date\"\n                  , \"Covered Outpatient Drug [(]COD[)] Status\"\n                  , \"FDA Application Number/OTC Monograph Number\"\n                  , \"TEC\"\n                  );\n    \n    names(api_data) |&gt;\n      rlang::set_names() |&gt;\n      imap_chr(\\(x, y){\n        .out &lt;- api_dictionary |&gt; \n            stri_extract_all_regex(\n              sprintf(\n                fmt = \"(%s)[:]\\n.+\"\n                , stri_replace_all_fixed(str = x, pattern = .pattern , replacement = .replacement, vectorize_all = FALSE) \n                )\n            , simplify = TRUE\n            ) |&gt;\n            stats::na.omit() |&gt;\n            as.vector() |&gt; \n            paste(collapse = \"\\n\");\n        \n        if (rlang::is_empty(.out)){ \n          y \n        } else { \n          .out &lt;- paste(.out, collapse = \"\\n\")\n          ifelse(stringi::stri_length(.out) &gt; 50, paste0(stri_sub(.out, length = 50), \" ...\"), .out)\n        }\n      })\n  });\n  \n  iwalk(.summary_labels, \\(x, y){ \n    api_data &lt;&lt;- modify_at(api_data, y, \\(i){ attr(i, \"label\") &lt;- x; i }) \n  });\n  \n  cache_prep(api_data) |&gt; cache_save(.cache);\n  cache_prep(api_dictionary) |&gt; cache_save(.cache)\n} else {\n  cache_load(.cache, \"global_api_dictionary\");\n}\n\n\nif (!\"global_openfda_ndc\" %in% .cache$keys()){\n  json.file &lt;- paste0(params$data_dir, \"/drug-ndc-0001-of-0001.json\");\n  download.file &lt;- tempfile();\n  \n  if (!file.exists(json.file)){ \n    tags$p(sprintf(\"Retrieve data from '%s'\", urls$openFDA)) |&gt; print()\n    \n    GET(urls$data$children |&gt; stri_extract_first_regex(\"https.+json.zip\"),\n      write_disk(path = download.file, overwrite = TRUE));\n    \n    unzip(zipfile = download.file, exdir = \"data\")\n  }\n      \n  open_fda_ndc &lt;- { read_json(path = json.file) %$% {\n    map(results, as.data.table) |&gt; rbindlist(fill = TRUE) |&gt;  \n      setattr(\"metadata\", meta)}\n  }\n  \n  cache_prep(openFDA_ndc) |&gt; cache_save(.cache);\n}\n\nif (!\"openFDA_ndc\" %in% ls()){ \n  cache_load(.cache, \"global_openfda_ndc\");\n}\n\n\n\n\nNDC sequences come in a various formats, usually a 4-4-x, 5-4-x, or 5-3-x sequence (each integer indicating string length). Sometimes other formats arise, so normalizing all NDC sequences is a good idea, especially when there is a desire (or need) to join different data containing intersecting NDCs.\nThe following shows proportional representation of NDC formats in the OpenFDA and MDRP data, respectively:\n\n\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-f93efa741ce058efe66c\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-f93efa741ce058efe66c\"&gt;{\"x\":{\"visdat\":{\"7e5c45115cba\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c45115cba\",\"attrs\":{\"7e5c45115cba\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c45115cba.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-27db07c029936675573a\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-27db07c029936675573a\"&gt;{\"x\":{\"visdat\":{\"7e5c6bb0cac\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c6bb0cac\",\"attrs\":{\"7e5c6bb0cac\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c6bb0cac.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n\n\n$`OpenFDA: NDC Formats`\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-9b81bfdb2734b0e5116f\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-9b81bfdb2734b0e5116f\"&gt;{\"x\":{\"visdat\":{\"7e5c45115cba\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c45115cba\",\"attrs\":{\"7e5c45115cba\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c45115cba.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"4-4\",\"5-3\",\"5-4\"],\"values\":[12637,70802,42628],\"hole\":0.59999999999999998,\"rotation\":0,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"OpenFDA\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n\n$`MDRP: NDC Formats`\n&lt;div style=\"display: inline-block; margin: 0px 0px 0px 0px;\"&gt;\n  &lt;div id=\"htmlwidget-5bee64c03f00541d2bf4\" style=\"width:100%;height:585px;\" class=\"plotly html-widget \"&gt;&lt;/div&gt;\n  &lt;script type=\"application/json\" data-for=\"htmlwidget-5bee64c03f00541d2bf4\"&gt;{\"x\":{\"visdat\":{\"7e5c6bb0cac\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e5c6bb0cac\",\"attrs\":{\"7e5c6bb0cac\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\"},\"7e5c6bb0cac.1\":{\"labels\":{},\"values\":{},\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":0.5,\"y\":0.5,\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"inherit\":true}},\"layout\":{\"width\":500,\"height\":450,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false,\"title\":[]},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"pie\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null},{\"labels\":[\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"Other&lt;br&gt;&lt;sup&gt;11 formats&lt;\\/sup&gt;\",\"5-4\",\"2-4\",\"3-3\",\"5-2\",\"3-4\",\"5-3\"],\"values\":[94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,94923,58700,60652,84379,110388,254384,736280],\"hole\":0.59999999999999998,\"rotation\":33,\"textinfo\":\"label+percent\",\"insidetextorientation\":\"radial\",\"type\":\"scatter\",\"x\":[0.5],\"y\":[0.5],\"text\":\"MDRP\",\"mode\":\"text\",\"xref\":\"paper\",\"yref\":\"paper\",\"font\":{\"family\":\"Georgia\",\"size\":22},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt;\n&lt;/div&gt;\n\n\nThe MDRP has many more NDC sequences due to truncation of leading zeroes. Fortunately, an NDC sequence is a collection of code segments (present in the data) concatenated with a hyphen. Knowing this, A function (check_ndc_format() — see setup.R was created in order to derive conformed NDC segment sequences (using labeler and product codes) based on the OpenFDA sequences, allowing the MDRP and OpenFDA data to be joined later in the process."
  },
  {
    "objectID": "etl.html#master-drug-data",
    "href": "etl.html#master-drug-data",
    "title": "Data Retrieval",
    "section": "Master Drug Data",
    "text": "Master Drug Data\n\nEvent MetricsDrug EventsCreationDrug EventsVisualization\n\n\nmaster_drug_data is a great data set for constructing simple, time-based metrics. Given the natural order of the types of events, it is easy to setup event sequence metrics using package lubridate. The metrics to be created are described below:\n\n\n\n\n\n\n\nMetric Name\nDescription\n\n\ndays_to_market\nDays between approval and market release\n\n\non_market_age\nDays active on market\n\n\ndays_market_absent\nDays most-recently absent from market\n\n\n\n\n\n\n\n\n\nMy next task was to add the date-differential metrics mentioned in the previous subsection. As an intermediate object, I created ndc_events by looking at what appears to the be natural chronology of dates: fda_approval_date -&gt; market_date -&gt; termination_date -&gt; reactivation_date.\nSome of the values in columns termination_date and reactivation_date are NA indicating the event did not happen. This would obviously need to be addressed in deriving the metrics logic, and after several rounds of trial-and-error, I worked out such logic, discovering the following in the process:\n\nThe metrics are hierarchically-contingent based on whether or not NA values exist and if so, which of termination_date, reactivation_date, or both\nSome values in termination_date and reactivation_date are future-dated relative to “today”: these were converted to NA before deriving the metrics as they haven’t happened yet (NA \\(\\equiv\\) Didn’t happen (yet))\nA small subset of observations having the FDA approval date after the listed market date\n\nThe resulting object was captured in ndc_events_clean:\n\nndc_events_clean &lt;- { \n  define(\n    ndc_events\n    , modify_at(\n        .SD, \"termination_date\"\n        , \\(x) ifelse(is.na(x), today() + weeks(24), ifelse(today() &lt; x, today() + weeks(24), x))\n        )\n    , modify_at(\n        .SD, \"reactivation_date\"\n        , \\(x) ifelse(is.na(x), termination_date, ifelse(x &gt; today(), today() + weeks(24), x))\n        )\n    , cbind(\n        .SD\n        , define({\n            .SD[, fda_approval_date:reactivation_date][, map(.SD, as.numeric)] |&gt; \n              # dplyr::slice_sample(prop = 0.4) |&gt;\n              apply(1, \\(x){\n                c(x, diff(x) |&gt; modify_if(is.na, \\(i) 0) |&gt; sign() %&gt;% .[-1]) |&gt; \n                  as.list() |&gt;\n                  modify_at(c(5, 6), \\(i) i == 1) %&gt;% \n                  rlang::set_names(names(.)[c(1:4)], paste0(names(.)[c(5, 6)], \".bool\"))\n                }, simplify = FALSE) |&gt;\n              rbindlist()\n            }\n          , days_to_market = market_date - fda_approval_date\n          , on_market_age = \n              apply(.SD[, .(termination_date.bool, reactivation_date.bool, termination_date)]\n                    , 1, function(i){ ifelse(i[[1]], ifelse(i[[2]], today(), i[[3]]), today()) \n                    }) -\n              apply(.SD[, .(termination_date.bool, reactivation_date.bool\n                            , market_date, reactivation_date)]\n                    , 1, function(i){ ifelse(i[[1]], ifelse(i[[2]], i[[4]], i[[3]]), i[[3]]) \n                    })\n          , days_market_absent = \n                apply(.SD[, .(reactivation_date.bool, reactivation_date)]\n                    , 1, function(i){ ifelse(i[[1]], i[[2]], today()) \n                    }) -\n                apply(.SD[, .(termination_date.bool, termination_date)]\n                    , 1, function(i){ ifelse(i[[1]], i[[2]], today()) \n                    })\n          , ~days_to_market + on_market_age + days_market_absent\n          )\n      )\n    , modify_at(.SD, c(\"termination_date\", \"reactivation_date\"), \\(x) as.Date(x, origin = \"1970-01-01\"))\n  )}\n\n#\n(\\(x, i, by){\n  i &lt;- define(x[i, on = by, allow.cartesian = TRUE]);\n  imap(.ndc_events_meta, \\(x, y){\n    rlang::inject(descr(\n      x = modify_at(i, y, \\(j) as.numeric(j, units = \"days\"))\n      , var = !!rlang::sym(y)\n      , transpose = !TRUE\n      )) |&gt; \n      view(method = \"render\", table.classes = 'multi_stat', custom.css = \"markdown.css\") |&gt;\n      tags$td()\n    });\n  })(master_drug_data\n     , ndc_events_clean\n     , { c(\"alt_ndc\", \"fda_application_number\"\n       , \"market_date\", \"termination_date\"\n       , \"reactivation_date\", \"fda_approval_date\"\n       )}) |&gt;\n  tags$tr() |&gt;\n  tags$table()\n\n\n\n\n\n\n\n\n\n\nDescriptive Statistics\ndays_to_market\nN: 93692\n\n\n\n\n\n\n\n\n\ndays_to_\nmarket\n\n\n\n\nMean\n887.11\n\n\nStd.Dev\n1998.58\n\n\nMin\n-9859.00\n\n\nQ1\n0.00\n\n\nMedian\n72.00\n\n\nQ3\n494.00\n\n\nMax\n11870.00\n\n\nMAD\n106.75\n\n\nIQR\n494.00\n\n\nCV\n2.25\n\n\nSkewness\n2.74\n\n\nSE.Skewness\n0.01\n\n\nKurtosis\n8.08\n\n\nN.Valid\n93692\n\n\nPct.Valid\n100.00\n\n\n\nGenerated by summarytools 1.0.1 (R version 4.3.2)\n2023-11-23\n\n\nDescriptive Statistics\non_market_age\nN: 93692\n\n\n\n\n\n\n\n\n\non_market_\nage\n\n\n\n\nMean\n4875.69\n\n\nStd.Dev\n3306.68\n\n\nMin\n1.00\n\n\nQ1\n2325.00\n\n\nMedian\n3983.00\n\n\nQ3\n6751.00\n\n\nMax\n12275.00\n\n\nMAD\n2944.44\n\n\nIQR\n4426.00\n\n\nCV\n0.68\n\n\nSkewness\n0.84\n\n\nSE.Skewness\n0.01\n\n\nKurtosis\n-0.29\n\n\nN.Valid\n93692\n\n\nPct.Valid\n100.00\n\n\n\nGenerated by summarytools 1.0.1 (R version 4.3.2)\n2023-11-23\n\n\nDescriptive Statistics\ndays_market_absent\nN: 93692\n\n\n\n\n\n\n\n\n\ndays_market_\nabsent\n\n\n\n\nMean\n394.53\n\n\nStd.Dev\n1113.01\n\n\nMin\n-3179.00\n\n\nQ1\n-168.00\n\n\nMedian\n-168.00\n\n\nQ3\n309.50\n\n\nMax\n11284.00\n\n\nMAD\n0.00\n\n\nIQR\n477.25\n\n\nCV\n2.82\n\n\nSkewness\n2.13\n\n\nSE.Skewness\n0.01\n\n\nKurtosis\n4.96\n\n\nN.Valid\n93692\n\n\nPct.Valid\n100.00\n\n\n\nGenerated by summarytools 1.0.1 (R version 4.3.2)\n2023-11-23\n\n\n\n\n\n\nSome of the ‘Max’/‘Min’ values are negative; however, the number of records is relatively small and, more importantly, explainable:\n\ndays_to_market: Approval occurred after the market date\ndays_market_absent: Records where the termination date was non-NA but after the market date\n\n\n\nCombining the master drug data and event data (master_drug_data + ndc_events_clean), after some trial-and-error, I settled on the following showing the root-mean-square of metric values grouped by route of administration:"
  },
  {
    "objectID": "question1.html",
    "href": "question1.html",
    "title": "Question I: Correlation",
    "section": "",
    "text": "Market AgeDays Absent from Market\n\n\n“How does the correlation between days_to_market and on_market_age change by route of administration?”:\n\nif (!\"drug_taxonomy\" %in% ls()){\n  stop(\"This section needs to be updated\")\n  cache_prep(drug_taxonomy) |&gt; cache_save(.cache);\n}\n\nif (!\"drug_obs_smart_data\" %in% ls()){\n  stop(\"This section needs to be updated\")\n  drug_obs_smart_data &lt;- smart.data$\n    new(x = drug_obs_data, name = \"drugs\")$\n    taxonomy.rule(!!!drug_taxonomy)$\n    enforce.rules(for_usage)$\n    cache_mgr(action = upd) |&gt;\n    invisible();\n  \n  cache_prep(drug_obs_smart_data) |&gt; cache_save(.cache);\n}\n\nget.smart(\"drugs\")$use(identifier, metrics, retain = c(route), subset = days_to_market &gt;= 0) |&gt; \n  # View() \n  setkey(route, alt_ndc, days_to_market, on_market_age) |&gt;\n  split_f(~route) |&gt;\n  map_dbl(\\(x) x %$% cor(as.numeric(days_to_market), as.numeric(on_market_age))) |&gt;\n  modify_if(is.na, \\(x) 0) |&gt; \n  (\\(x){ \n    x &lt;- x[order(x)]\n    nm &lt;- names(x)\n    z &lt;- calc.zero_mean(x, as.zscore = TRUE, use.population = TRUE)\n    y &lt;- ratio(x + abs(min(x)), type=\"pareto\", decimals = 6)\n    \n    .wh_scale &lt;- 800 * c(1.2, .7)\n    \n    plot_ly(\n      x = z\n      , y = y\n      , size = 5 * exp(x) + 10\n      , width = .wh_scale[1]\n      , height = .wh_scale[2]\n      , hoverinfo = \"text\"\n      , hovertext = sprintf(fmt =\"&lt;b&gt;%s&lt;/b&gt;&lt;br&gt;&lt;b&gt;Y:&lt;/b&gt; %.2f%% of Total&lt;br&gt;&lt;b&gt;Cor&lt;/b&gt;(days_to_market, on_market_age): %.2f&lt;br&gt;&lt;b&gt;Z-score&lt;/b&gt;(X): %.2f\", nm, y * 100, x, z)\n      , color = x\n      , stroke = I(\"black\")\n      , type = \"scatter\", mode = \"markers\"\n      ) |&gt;\n      config(mathjax = \"cdn\", displayModeBar = FALSE) |&gt;\n      layout(\n        xaxis = list(\n            title = list(\n              text = \"Z-score&lt;sub&gt;X&lt;/sub&gt;: X | Cor(m&lt;sub&gt;0&lt;/sub&gt;, m&lt;sub&gt;1&lt;/sub&gt;) ~ Route\"\n              , font = list(size = 16, family = \"Georgia\"))\n            , gridcolor = \"#FFFFFF\"\n            )\n        , yaxis = list(\n            title = list(\n              text = \"Cumulative Proportion (X)\"\n              , font = list(size = 16, family = \"Georgia\"))\n            , gridcolor = \"#FFFFFF\"\n            )\n        , title = list(\n            text = sprintf(\"Correlation Coefficient (&lt;span style='text-emphasis-position:under; text-emphais: filled red double-circle; '&gt;%s&lt;/span&gt; vs. &lt;span style='text-emphasis-position:under; text-emphais: filled red double-circle; '&gt;%s&lt;/span&gt;) by Route of Administration\", \"days_to_market\", \"on_market_age\")\n            , font = list(family = \"Georgia\"))\n        , plot_bgcolor = rgb(.8,.8,.8)\n        , margin = list(b = 30, t = 50)\n        ) \n  })();\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\nWarning in cor(as.numeric(days_to_market), as.numeric(on_market_age)): the\nstandard deviation is zero\n\n\nWarning: `line.width` does not currently support multiple values.\n\n\n\n\n\n\n\n\n“How does the correlation between days_to_market and days_market_absent change by route of administration?”:\n\nget.smart(\"drugs\")$use(identifier, metrics, retain = c(route), subset = days_to_market &gt;= 0) |&gt; \n  unique() |&gt;\n  setkey(route, alt_ndc, days_market_absent, on_market_age) |&gt;\n  split_f(~route) |&gt;\n  map_dbl(\\(x) x %$% { \n    suppressWarnings(cor(as.numeric(days_market_absent), as.numeric(on_market_age)))\n  }) |&gt;\n  modify_if(is.na, \\(x) 0) |&gt; \n  (\\(x){ \n    x &lt;- x[order(x)]\n    nm &lt;- names(x)\n    z &lt;- calc.zero_mean(x, as.zscore = TRUE, use.population = TRUE)\n    y &lt;- ratio(x + abs(min(x)), type=\"pareto\", decimals = 6)\n    \n    .wh_scale &lt;- 800 * c(1.2, .7)\n    \n    plot_ly(\n      x = z\n      , y = y\n      , size = 5 * exp(x) + 10\n      , width = .wh_scale[1]\n      , height = .wh_scale[2]\n      , hoverinfo = \"text\"\n      , hovertext = sprintf(fmt =\"&lt;b&gt;%s&lt;/b&gt;&lt;br&gt;&lt;b&gt;Y:&lt;/b&gt; %.2f%% of Total&lt;br&gt;&lt;b&gt;Cor&lt;/b&gt;(days_to_market, days_market_absent): %.2f&lt;br&gt;&lt;b&gt;Z-score&lt;/b&gt;(X): %.2f\", nm, y * 100, x, z)\n      , color = x\n      , stroke = I(\"black\")\n      , type = \"scatter\"\n      , mode = \"markers\"\n      ) |&gt;\n      config(mathjax = \"cdn\", displayModeBar = FALSE) |&gt;\n      layout(\n        xaxis = list(\n            title = list(\n              text = \"Z-score&lt;sub&gt;X&lt;/sub&gt;: X | Cor(m&lt;sub&gt;0&lt;/sub&gt;, m&lt;sub&gt;1&lt;/sub&gt;) ~ Route\"\n              , font = list(size = 16, family = \"Georgia\"))\n            , gridcolor = \"#FFFFFF\"\n            )\n        , yaxis = list(\n            title = list(\n              text = \"Cumulative Proportion (X)\"\n              , font = list(size = 16, family = \"Georgia\"))\n            , gridcolor = \"#FFFFFF\"\n            )\n        , title = list(\n            text = sprintf(\"Correlation Coefficient (&lt;span style='text-emphasis-position:under; text-emphais: filled red double-circle; '&gt;%s&lt;/span&gt; vs. &lt;span style='text-emphasis-position:under; text-emphais: filled red double-circle; '&gt;%s&lt;/span&gt;) by Route of Administration\", \"days_to_market\", \"days_market_absent\")\n            , font = list(family = \"Georgia\"))\n        , plot_bgcolor = rgb(.8,.8,.8)\n        , margin = list(b = 30, t = 50)\n        ) \n})()\n\nWarning: `line.width` does not currently support multiple values.\n\n\n\n\n\n\nMarket age relative to days to market shows more variability in correlation distribution. This is not to make an claim of statistically significant differentiation; however, it may be worth exploring whether or not there are clusters of administration routes based on event correlation. A future update may address this, but this is as deep of exploration I’ll go for now."
  }
]