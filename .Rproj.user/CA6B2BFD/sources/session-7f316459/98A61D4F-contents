---
title: 'Dataset Design: Temporal Concurrency - Who & When'
author: "Chionesu George"
date: 2023-10-31
date-modified: last-modified
slug: who-and-when
series: 
  - Dataset Design and Temporal Concurrency
categories:
  - Data Engineering
  - Theory
tags:
  - analytics
  - engineering
  - time
  - data
  - semantics
toc:
  - depth: 2
  - float: true
---

{{% blogdown/jquery %}}

```{r SETUP, echo=FALSE}
#| label: SETUP
#| echo: false
knitr::opts_chunk$set(echo = FALSE);

options(article="dataset-design-and-temporal-concurrency");

source(file = "setup.R", local = environment());

tags$link(rel="stylesheet", href="/markdown.css");

tags$script(src = "/markdown.js");

# last_mod

tags$span(style = "display: hidden;", taxonomy);

hourglass.png <- magick::image_read("C:/Users/sapie/GitHub/delriaan.github.io/static/hourglass.png");

break_time <- tags$p(
  tags$hr(style = "border-bottom: solid 5px #555555; width:100%; ")
  , tags$span(
      style = "font-size:4em;"
      , class = "speech"
      , tags$img(
          src = "/hourglass.png"
          , caption="Take a Break!"
          , style="height:3em; vertical-align:text-top; margin-top:-50px; float:left"
          )
      , "Take a Break!"
      )
  , tags$hr(style = "border-top: solid 5px #555555; width:100%; ")
  );

```

[Welcome back!]{.decorativeText}

Before getting started, let's revisit out problem statement from the introduction:

```{r PROBLEM_STATEMENT}
#| label: PROBLEM_STATEMENT
problem_statement
```

The conventions I'll use are also defined in the introduction [here](../introduction#definitions--conventions){target='_blank'}.

## When 

Identifying the global temporal window ( $W$ ) is important as defines the frame of reference within which temporal relations are queried and transformed. It is the absolute governor of detecting *when* things take place.  In this case, the window is defined as all records having temporal columns or derived temporal measurements with at least *one* value falling within the period *2019-01-01* to *2020-12-31*:

[ $\forall W, D^Î» \Rightarrow D^\lambda_\Omega:= \Bigg\{\matrix{ W_\text{start} \le \delta^T \le W_\text{end},\enspace\enspace\#\delta^T= 1\\ \\ W_\text{start} \le \delta^T_\text{end} \wedge W_\text{end} \ge \delta^T_\text{start},\enspace\enspace\#\delta^T= 2 }\Bigg\}$ ]{.mathblock}

, where $D^\lambda$ is the data source for context $\lambda$ (i.e., *demographics*, *claims*, *prescriptions*) and $W$ the lower and upper dates of the global window. The first form of $D^\lambda$ above reflects the case of a *single* time column in $D$ and the second form when there are two.

```{r}
drop_hint("Regarding the second form:", context = "posthoc", toggleGroup = 0)
```

- It allows for a much more compact dataset. I recommend giving serious consideration to transforming the single-date form into the dual-date form, especially when most of $\delta^I$ is duplicative along [ $\delta^T$]{.medMath msg_id="tax_T"} (more on this in a future article)

- It allows for $\delta^T$ to extend outside of the bounds of $W$ while preserving the ability to detect temporal concurrency relative to $W$

- ***Do not*** use the following logic to detect concurrency of the dual-date form with $W$ (or any other dual-date range):<br>[ $(W_\text{start} \le \delta_\text{start} \le W_\text{end} ) \vee (W_\text{start} \le \delta_\text{end} \le W_\text{end})$ ]{.mathblock} This logical statement **will** fail to capture cases where $\delta^T$ extends outside of $W$:<br><br>`r window_example.png`

## Who 

The "Who" aspect of the problem statement consists of two detectable conditions (as indicated by the conjunction *"and"*) and a possible, third:

- [ $\omega_1$]{.bigMath}: ["... members between 30 and 50 years old"]{.speech #msg_1}

- [ $\omega_2$]{.bigMath}: ["... have had at least two inpatient visits within a six-week period"]{.speech #msg_2}

- [ $\omega_3$]{.bigMath}: $f(\omega_1, \omega_2)$ &mdash; [dependence vs. independence]{.speech #msg_3}

### [Age vs. Report Window]{#omega-1} ([ $\omega_1$]{.medMath msg_id=1}) 

[ $\omega_1$]{.medMath msg_id=1} is the first opportunity to greatly trim down your data pull.

```{r}
drop_hint("It also presents a great case-in-point as to why carefully reading over a request <i>before</i> thrashing away at the keyboard is important:", context = "posthoc", toggleGroup = 1)
```

- [ $\omega_1$]{.medMath msg_id=1} must qualified relative to [ $W$]{.medMath} and not ["as of today"]{.speech}. Granted: this is not *explicitly* stated, but think about it: ["... for the period between January first of 2019 and the end of 2020"]{.speech} is your cue. Of course, when in doubt, check with the requester just to be sure.
- [ $W$]{.medMath} covers *two* years which will result in *two* ages for each member not filtered out. **Question**: Which age should be returned at this point? My preference would be *neither* and instead return the dates of birth. *Age* is a derived measure and is only needed to qualify records at this point; *dates of birth* are the temporal attributes ([ $\delta^T$]{.medMath msg_id="tax_T"}) which should carried forward (I'll explain why later).

[ &#10024; ]{.bigMath style="color:#330033; "} At this stage, we've defined the first portion of ["Who"]{.speech} is related to the problem statement. An advantage of starting in this manner is that a maximally large cohort has been defined and can be stored in a table to which subsequent data can more efficiently be joined. 

For the sake of demonstration, assume the existence of a member demographics table $(M)$. Satisfying [ $\omega_1$]{.medMath msg_id=1} results in our first dataset: $D^M:=\sigma_{\omega_1}(M)$
, where [ $\sigma$]{.medMath} represents a [*selection*](https://en.wikipedia.org/wiki/Selection_(relational_algebra) "Selection (Relational Algebra)"){.speech target="_blank"} operation.

```{r BREAK_TIME}
break_time
```

### [Events vs. Report Window]{#omega-2} ([ $\omega_2$]{.medMath msg_id=2})

Now, we move on to defining ([ $\omega_2$]{.medMath msg_id=2}).  Assume a claims dataset $(L)$ containing multiple service types $(\delta^G: \text{Inpt}\in G)$. To satisfy this requirement, *three* conditionals need to be addressed:

```{r COND_I}
drop_hint(
  "<b>c<sub>1</sub></b> &mdash; Has inpatient visits within <span style='font-family:Georgia;'>W</span>:"
  , context = "posthoc"
  , toggleGroup = 1
  )
```

[ $c_1:= W_\text{start} \le \dot{\delta^T} \le{W}_\text{end}; \enspace\dot{\delta^T}\equiv\text{service date}$]{.mathblock toggleGroup=1 context="posthoc"}

```{r COND_II}
tags$p()
drop_hint(
  "<b>c<sub>2</sub></b> &mdash; Number of inpatient visits greater than one:"
  , context = "posthoc"
  , toggleGroup = 2
  )
```

[If dataset $L$ has well-defined indicators for admissions (and discharges), detecting distinct events is easy. For the sake of this scenario, I will assume this to be the case [[scenarios where the beginning and ending of a series are not well-defined will be covered in a separate article &mdash; eventually]]{.speech}:
[ $c_2:=\#\big(\dot{\delta^T|}c_1\big) > 1;\enspace\dot{\delta^T}\equiv\text{admission date}$]{.mathblock}
]{toggleGroup=2 context="posthoc" style="right:20px; "}

```{r COND_III}
tags$p()
drop_hint(
  "<b>c<sub>3</sub></b> &mdash; Time between inpatient admissions less than or equal to six weeks:"
  , context = "posthoc"
  , toggleGroup = 3
  )
```

[
[ $c_3:=\big({\Delta_n}\dot{\delta^T}|{c_2}\big)\ge\text{42 days}\\{\Delta_n}\dot{\delta^T}:={\dot{\delta^T}}_{i+1}-{\dot{\delta^T}}_i\Big|_{i=1}^{n-1},\enspace\text{ the time between successive admissions}$]{.mathblock}
]{toggleGroup=3 context="posthoc"}

```{r COND_ORDER}
tags$p()
drop_hint("Before moving on, I want to point out that for performance considerations, the order in which the conditionals are resolved can become very important.  Normally, I would first try the following:"
          , context = "posthoc"
          , toggleGroup = 4
          )
```

[&nbsp;&nbsp; **1<sup>st</sup> $c_1$:** This is the most restrictive and is easily accomplished with a [join](https://en.wikipedia.org/wiki/Relational_algebra#Joins_and_join-like_operators "Join (Relational Algebra)") operation over relations $M$ and $S$: $M \bowtie_{\theta \rightarrow \delta^I}{S}, \enspace\delta^I\equiv\text{member identifier}$<br>
&nbsp;&nbsp; **2<sup>nd</sup> $c_3$:** Resolving $c_3$ gives you $c_2$ for free (I'll leave that as *"thought homework"* for you to ponder)<br>
&nbsp;&nbsp; **3<sup>rd</sup> $c_2$:** This is easily resolved by counting over $c_3$ and qualifying based on the prescribed threshold<br>
[The second and third steps can easily be flipped depending on the number of `TRUE` cases at each step. Use your domain knowledge (or someone else's) in these cases or, if all else fails, use multple trial-and-error runs on sampled data (sampling at the member level, in this case) to get a sense of which order will have the best performance on the full set of observations.]{.speech}
]{toggleGroup=4 context="posthoc" style="display:block"}

![](/decorative_line.png){.decorative-line}

### [Temporal Dependence vs. Independence]{#omega-3} ([ $\omega_3$]{.medMath msg_id=3})

In this final portion of the article, I want to offer a consideration related to the [problem statement]{msg_id="problem" style="border-bottom: dashed 2px green;"} that I recommend verifying at the beginning of the data retrieval and wrangling process: *temporal dependence vs. independence.* Conceptually similar to (in)dependence of variables, this is in a *semantic* context often encountered when there is ambiguity regarding the relationships among temporal criteria that cannot simply be inferred.

For example, consider two scenarios in which [ $\omega_{1}$]{.medMath msg_id=1} and [ $\omega_{2}$]{.medMath msg_id=2} can be understood:

- **Scenario 1: Independence** ( $\forall W:\omega_1 \wedge\omega_2$)

   > In this scenario, [ $\omega_1$]{.medMath msg_id=1} is sufficient, and the age calculated when resolving this criterion can be carried forward.

- **Scenario 2: Dependence** ( $\forall W: \big(\omega_1|\omega_2\big)$)

   > In this scenario, a determination (made by the requester) must be made as to which qualifying event in [ $\omega_{2}$]{.medMath msg_id=2} &mdash; first or second &mdash; serves as the point of reference to evaluate [ $\omega_{1}$]{.medMath msg_id=1}. Scenarios like this are why I recommended only carrying forward *essential* information (in this case, the member dates of birth) instead of *contingent* information (e.g., member age relative to $W$).

Problem statements related to workflows with multiple decision points frequently cause the second scenario to arise in analytic initiatives, so it is good to look into the real-world context of a request in addition to the available data.

![](/decorative_line.png){.decorative-line}

## [&#127881;]{style="font-size:1.5em;"}[ Congratulations!]{.decorativeText} 

[As an aside, if you are a data practioner and are not familiar with *predicate logic* or *relational algebra*, I *strongly* recommend getting a basic understanding &mdash; *especially* if combining heterogeneous data is part of your workflow.]{.sidebar}

You've made it to the end! I'll summarize our journey so far:

- We saw how a plain-language statement can be decomposed into smaller, logical chunks to be stepped through and interrogated.

- We looked at the ["When"]{.speech} and ["Who"]{.speech} of our problem statement and explored temporally-based considerations such as global windows of time, relative time between events, and relative event sequencing.

- We considered how the order in which criteria are addressed relates to query and processing performance.

- I hope you see that as we work through the full statement, what emerges is a ["design map"]{.speech} of sorts (which also helps with data product documentation).

That's all for now &mdash; I look forward to seeing you in [Part 2](../what){target="_blank"} where we explore the ["What"]{.speech} of our problem statement.

{{% blogdown/footer %}}
